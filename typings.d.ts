declare module '*.css';
declare module '*.less';
declare module '*.png';
declare module '*.svg' {
  export function ReactComponent(
    props: React.SVGProps<SVGSVGElement>,
  ): React.ReactElement;
  const url: string;
  export default url;
}

export type OrderExtraCharge = {
  id: number;
  orderId: number;
  requester: number;
  type: number;
  description: string;
  amount: number;
  confirmAt: Date;
  status: number;
  updatedAt: Date;
  createdAt: Date;
  deletedAt: Date;
};
export type ShippingOption = {
  id: number;
  type: number;
  channelId: number;
  displayName: string;
  shippingCost: number;
  currency: string;
};
export type OrderFeeDetail = {
  deliveryCost: number; // 渠道运费
  fuelFee: number; // 渠道燃油费
  miscFee: number; // 渠道杂费
  processingFee: number; // 渠道处理费
  registrationFee: number; // 渠道注册费
  channelTotalCost: number; // 渠道总费 order.estimatedCost = deliveryCost + fuelFee + miscFee + registrationFee + processingFee
  packageFee: number; // 仓库包装费
  handlingFee: number; // 仓库操作费
  vat: number; // 增值税
  total: number; // order.estimatedCost + order.packageFee + order.handlingFee + order.vat
  currency: string;
};
export type Channel = {
  id: number;
  warehouseId: number;
  code: string;
  name: string;
  enName?: string;
  displayName?: string;
  hasTrackingNumber?: boolean;
  description?: string;
  courierPlatform?: string;
  minNormalDays?: number | string;
  maxNormalDays?: number | string;
  maxLength?: number;
  minLength?: number;
  maxThreeSideSum?: number;
  volumeFactor?: number;
  battery?: boolean | string;
  type?: number | string;
  sortingPort?: number;
  prepayTariff?: boolean | string;
  status?: number | string;
  test?: boolean | string;
  hasChannelCost?: boolean;
  updatedAt: Date;
  createdAt: Date;
};
export type Warehouse = {
  id: number;
  code: string;
  warehousePlatform: string;
  name: string;
  company: string;
  firstName: string;
  lastName: string;
  countryName: string;
  countryCode: string;
  province: string;
  city: string;
  address: string;
  address1: string;
  address2: string;
  zipCode: string;
  phone: string;
  status?: number | string;
  updatedAt: Date;
  createdAt: Date;
  deletedAt: Date;
};
export type Product = {
  id: number;
  productTenant: number;
  tenant: Tenant;
  name: string;
  declaredCnName: string;
  declaredName: string;
  hsCode: string;
  sku: string;
  barcode: string;
  declaredValueInUsd: number;
  declaredValueInEur: number;
  currency: string;
  withBarcode: number;
  barcodeService: number;
  barcodeTemplate: string[];
  images: string[];
  attributes: string[];
  confirmedAttributes: string[];
  grams: number;
  inboundGrams: number;
  length: number;
  width: number;
  height: number;
  maxAgvQty: number;
  status: number;
  createdAt: string;
  updatedAt: string;
  deletedAt: null;
  // inventories: Inventory[];
  statusLabel: any;
};
export type OrderItem = {
  id: number; // Note that the `null assertion` `!` is required in strict mode.
  orderItemTenant: number;
  storeId: number;
  orderId: number;
  productId: number;
  product: Product;
  barcode: string;
  fulfillmentService: string;
  extOrderItemId: string;
  extProductId: string;
  listingSku: string;
  sku: string;
  isCustomItem: boolean;
  name: string;
  declaredName: string;
  declaredCnName: string;
  declaredValueInUsd: number;
  declaredValueInEur: number;
  currency: string;
  hsCode: string;
  images: string[];
  attributes: string[];
  grams: number;
  length: number;
  width: number;
  height: number;
  qty: number;
  unitPrice: number;
  fulfillQty: number;
  requiresShipping: boolean;
  giftCard: boolean;
  taxable: boolean;
  status: number;
  updatedAt: Date;
  createdAt: Date;
  deletedAt: Date;
};
export type Role = {
  id: number;
  name: string;
  displayName: string;
  createdAt: string;
  updatedAt: string;
};

export type User = {
  id: number;
  userTenant: number;
  name: string;
  email: string;
  type: string;
  code: string;
  selectedStoreId: number;
  selectedWarehouseId: number | null;
  status: number;
  createdAt: string;
  updatedAt: string;
  roles: Role[];
  role_ids: number[];
};
export interface Tenant {
  id: number;
  code: string;
  csUserId: number;
  salesUserId: number;
  inviterUserId: number;
  balance: number;
  currency: string;
  handlingFee: number;
  shippingOption: number;
  defaultWarehouse: number;
  prepayTariff: boolean;
  iossNumber: string;
  iossCountryCode: string;
  ukVatNumber: string;
  presetChannelIds: string;
  testChannelIds: string;
  createdAt: string;
  updatedAt: string;
  deletedAt: string;
  tenantUsers: User[];
  salesUser: User;
  csUser: User;
  inviterUser: User;
}
export type Store = {
  id: number;
  storeTenant: number;
  storeUrl: string;
  platform: string;
  name: string;
  email: string;
  accessToken: string;
  scope: string;
  initialStatus: number;
  state: string;
  timestamp: number;
  balance: number;
  currency: string;
  storeCurrency: string;
  status?: number | string;
  shippingOption: number;
  handlingFee: number;
  updatedAt: Date;
  createdAt: Date;
  deletedAt: Date;
};
export type Order = {
  un_print?: boolean;
  id: number;
  orderNumber: string;
  offline: boolean;
  orderTenant: number;
  tenant: Tenant;
  storeId: number;
  store: Store;
  containerCode: string;
  basketNumber: string;
  type: number;
  platform: string;
  platformOrderId: string;
  platformOrderNo: string;
  platformOrderStatusUrl: string;
  totalItemsPrice: number;
  currency: string;
  items: OrderItem[];
  contactEmail: string;
  contactPhone: string;
  locationId: string;
  warehouseId: number;
  warehouse: Warehouse;
  channelId: number;
  channel: Channel;
  shipType: number;
  packageCost: number;
  deliveryCharge: number;
  estimatedCost: number;
  estimatedCurrency: string;
  fulfillQtyTotal: number;
  feeDetail: OrderFeeDetail;
  qtyTotal: number;
  percentage: number;
  declaredValueInUsd: number;
  declaredValueInEur: number;
  channelOptions: ShippingOption[];
  estimatedWeight: number;
  courierWeight: number;
  sortingLength: number;
  sortingWidth: number;
  sortingHeight: number;
  volumeWeight: number;
  sortingWeight: number;
  checkoutActualWeight: number;
  receivablesAmount: number;
  receivablesCurrency: string;
  shippingName: string;
  shippingFirstName: string;
  shippingLastName: string;
  shippingCompany: string;
  shippingCountry: string;
  shippingCountryCode: string;
  shippingProvince: string;
  shippingProvinceCode: string;
  shippingCity: string;
  shippingAddress: string;
  shippingAddress1: string;
  shippingAddress2: string;
  shippingZipCode: string;
  shippingPhone: string;
  shippingLatitude: string;
  shippingLongitude: string;
  shippingCertificateType: string;
  shippingCertificateCode: string;
  shippingCredentialsPeriod: string;
  tags: string[];
  note: string;
  estimatedArrival?: Date;
  shipDate?: Date;
  trackingCompany?: string;
  trackingNumber?: string;
  waybillNumber?: string;
  trackingUrl?: string;
  nssTrackingNumber: string;
  nssTrackingUrl: string;
  nssCourierOrderNumber: string;
  fulfillmentPushed: boolean;
  shippingLabelUrl?: string;
  shippingLabelPath?: string;
  shippingLabelSignedUrl?: string;
  paidStatus: string;
  confirmed: boolean;
  fulfillmentStatus: string;
  settlementStatus?: boolean;
  cancelRequest: number;
  status: number;
  paymentStatus: number;
  holdStatus: number;
  holdStatusLabel: string;
  holdReasons: { id: number; type: string; code: number; reason: string }[];
  remark: string;
  cancelReason: string;
  printTimes: number;
  platformCreatedAt: Date;
  requestShippingAt?: Date;
  unshelfRequestedTime?: Date;
  cancelledAt: Date;
  closedAt: Date;
  deletedAt: Date;
  updatedAt: Date;
  createdAt: Date;
  extraCharges: OrderExtraCharge[];
  taxations: { type: string; countryCode: string; number: number }[];
};
